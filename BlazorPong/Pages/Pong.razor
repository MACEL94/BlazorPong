@page "/pong"
@using Microsoft.AspNetCore.SignalR.Client
@inherits PongBase

<style>
    #player1 {
        background-color: red;
        width: 20px;
        height: 100px;
        position: absolute;
        left: @(GameObjects.FirstOrDefault(g => g.Id.Equals("player1"))?.LeftPx ?? "100px");
        top: @(GameObjects.FirstOrDefault(g => g.Id.Equals("player1"))?.TopPx ?? "100px");
    }

    #player2 {
        background-color: green;
        width: 20px;
        height: 100px;
        position: absolute;
        left: @(GameObjects.FirstOrDefault(g => g.Id.Equals("player2"))?.LeftPx ?? "880px");
        top: @(GameObjects.FirstOrDefault(g => g.Id.Equals("player2"))?.TopPx ?? "100px");
    }

    #ball {
        background-color: blue;
        width: 20px;
        height: 20px;
        position: absolute;
        left: @(GameObjects.FirstOrDefault(g => g.Id.Equals("ball"))?.LeftPx ?? "500px");
        top: @(GameObjects.FirstOrDefault(g => g.Id.Equals("ball"))?.TopPx ?? "250px");
    }

    .makeRed {
        color: red;
        text-align: center;
    }

    .makeGreen {
        color: green;
        text-align: center;
    }

    .makeGolden {
        color: goldenrod;
        text-align: center;
    }
</style>

<h2 id="message" class="makeGolden">@PlayerTypeMessage</h2>

<div class="row">
    @if (Connection == null || (Connection.State != HubConnectionState.Connected && Connection.State != HubConnectionState.Reconnecting))
    {
        <h4 class="makeGolden">@ConnectionMessage</h4>
        <div class="form-row align-items-center">
            <div class="col-auto my-1">
                <label class="mr-sm-2 sr-only" for="inlineFormCustomSelect">Connection Type</label>
                <select class="custom-select mr-sm-2" id="inlineFormCustomSelect" @onchange=@SaveChoice>
                    @foreach (var connectionType in ConnectionTypesDictionary.Keys)
                    {
                        <option value=@connectionType>@connectionType</option>
                    }
                </select>
            </div>
            <div class="col-auto my-1">
                <button type="button" @onclick="@ConnectToHub" class="btn btn-primary">Connect</button>
            </div>
        </div>
    }
    else
    {
        @if (GameMessage != null)
        {
            <h4 class="col makeGolden">@GameMessage</h4>
        }
        @if (_playerType != Enums.ClientType.Spectator && GameMessage == null)
        {
            <button type="button" @onclick="@SetPlayerIsReady" class="btn btn-success col">Play</button>
        }
        <div class="col makeRed">Player 1: @Player1Points</div>
        <div class="col makeGreen">Player 2: @Player2Points</div>
    }
    @* Solo per centrare il contenuto *@
    <div class="col"></div>
</div>



<div id="area">
    <div id="tophorizontalboundary"></div>
    <div id="leftverticalboundary"></div>
    @foreach (var go in GameObjects)
    {
        // ball, player1 e player2
        <div id="@go.Id" draggable="@go.Draggable" @ondrag="@(e => MoveOnYAxisAndFlag(e, go))"></div>
    }
    <div id="bottomhorizontalboundary"></div>
    <div id="rightverticalboundary"></div>
</div>